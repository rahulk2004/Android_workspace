class MusicPlayerActivity : AppCompatActivity() {
    private lateinit var mediaPlayer: MediaPlayer
    private lateinit var seekBar: SeekBar
    private lateinit var handler: Handler
    private lateinit var runnable: Runnable
    private lateinit var startTimeTextView: TextView  // To display start time

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_music_player)

        seekBar = findViewById(R.id.seekBar)
        startTimeTextView = findViewById(R.id.startTimeTextView) // Your TextView for start time
        mediaPlayer = MediaPlayer.create(this, R.raw.sample_audio)
        handler = Handler(Looper.getMainLooper())

        seekBar.max = mediaPlayer.duration

        // Ensure start time updates when song starts
        mediaPlayer.setOnPreparedListener {
            seekBar.progress = 0
            startTimeTextView.text = formatTime(0) // Update start time to 00:00
            updateSeekBar()
        }

        findViewById<Button>(R.id.playButton).setOnClickListener {
            if (!mediaPlayer.isPlaying) {
                mediaPlayer.start()
                updateSeekBar() // Ensure seekbar updates immediately
            }
        }
    }

    private fun updateSeekBar() {
        runnable = object : Runnable {
            override fun run() {
                seekBar.progress = mediaPlayer.currentPosition
                startTimeTextView.text = formatTime(mediaPlayer.currentPosition) // Update start time
                handler.postDelayed(this, 500)
            }
        }
        handler.postDelayed(runnable, 0) // Start updating immediately
    }

    private fun formatTime(ms: Int): String {
        val minutes = (ms / 1000) / 60
        val seconds = (ms / 1000) % 60
        return String.format("%02d:%02d", minutes, seconds)
    }

    override fun onDestroy() {
        super.onDestroy()
        handler.removeCallbacks(runnable)
        mediaPlayer.release()
    }
}
